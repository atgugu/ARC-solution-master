vImage splitAll(Image_ img);
Image eraseCol(Image img, int col);
vImage insideMarked(Image_ in);
Image makeBorder(Image_ img, int bcol = 1);
Image makeBorder2(Image_ img, int usemaj = 1);
Image makeBorder2(Image_ img, Image_ bord);
Image compress2(Image_ img);
Image compress3(Image_ img);
Image greedyFillBlack(Image_ img, int N = 3);
Image greedyFillBlack2(Image_ img, int N = 3);
Image extend2(Image_ img, Image_ room);
Image connect(Image_ img, int id);
Image replaceTemplate(Image_ in, Image_ need_, Image_ marked_, int overlapping = 0, int rigids = 0);
Image swapTemplate(Image_ in, Image_ a, Image_ b, int rigids = 0);
Image spreadCols(Image img, int skipmaj = 0);
vImage splitColumns(Image_ img);
vImage splitRows(Image_ img);
Image half(Image_ img, int id);
Image smear(Image_ img, int id);
Image ringSmear(Image_ base, Image_ room);
Image diagonalSmear(Image_ img, int id);
Image checkerboardSmear(Image_ base, Image_ room);
Image diagonalSmear(Image_ base, Image_ room, int id);
Image applyColorMapping(const Image_ &img, const std::unordered_map<int, int> &colorMap);
Image repairRotationalSymmetry(const Image& img);
Image mirror2(Image_ a, Image_ line);
vImage gravity(Image_ in, int d);
Image myStack(vImage_ lens, int id);
Image stackLine(vImage_ shapes);
Image composeGrowing(vImage_ imgs);
Image zoomIn(const Image& img, int id);
Image upscaleImage(const Image& img, int scaleFactor);
Image stretchImage(const Image& img, int stretchFactor, int direction);
Image downscaleImage(const Image& img, int factor);
Image upscaleImageHelper(const Image& img, int factor);
bool morphologicallySimilar(const Image& img1, const Image& img2);
Image dilate(Image_ img, int iterations = 1);
Image erode(Image_ img, int iterations = 1);
Image dilation(Image_ img);
Image erosion(Image_ img);
Image dilate1(Image_ img);
Image erode1(Image_ img);
Image dilate2(Image_ img);
Image erode2(Image_ img);
Image dilate3(Image_ img);
Image erode3(Image_ img);
Image pickUnique(vImage_ imgs, int id);
Image detectPatterns(Image_ img, unsigned int size = 2);
Image detectPatterns2Image2(Image_ img);
Image detectPatterns2Image3(Image_ img);
Image detectPatterns2Image4(Image_ img);
Image detectPatterns2Image5(Image_ img);
Image detectPatterns2Image6(Image_ img);
Image detectPatterns2Image7(Image_ img);
Image detectPatterns2Image8(Image_ img);
Image detectPatterns2Image9(Image_ img);
Image removeGrid(const Image& img);

Image diagonalGravity(Image_ img, int corner);
Image circularShift(Image_ img, bool isRowShift, int shiftAmount);
Image trimToContent(Image_ img);
Image detectRepeatingPatternWithHole(Image_ img,bool fillHole);
Image gridFilter(Image_ img, int cellHeight, int cellWidth);
bool detectRepeatingPattern(Image_ img, Image& pattern, int& offsetX, int& offsetY);
Image enforceSymmetry(Image_ img, unsigned int symmetryType = 0);
Image detectCrossPattern(Image_ img, unsigned int size = 3);
Image detectCheckerboardPattern(Image_ img, unsigned int size = 2);
Image detectHorizontalStripes(Image_ img, unsigned int size = 2);
Image detectVerticalStripes(Image_ img, unsigned int size = 2);
Image detectDiagonalPattern(Image_ img, unsigned int size = 2);

Image mostCommonShape(Image_ img);
vector<Image> extractConnectedComponents(Image_ img);
Image detectTranslation1DPattern(Image_ img);
Image detectTranslationPattern(Image_ img);
Image enforceRotationalSymmetry90(Image_ img);
Image enforceRotationalSymmetry180(Image_ img);
Image enforceDiagonalSymmetryNESW(Image_ img);
